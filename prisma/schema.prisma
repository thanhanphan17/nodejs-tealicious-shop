// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String
  password      String
  role          UserRole        @default(user)
  address       String?
  avatar        String?
  status        String          @default("active")
  deleted       Boolean         @default(false)
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  ProductRating ProductRating[]
  Order         Order[]
  Cart          Cart[]
  Payment       Payment[]

  @@index([id, email])
  @@map("users")
}

enum ProductStatus {
  unreleased
  instock
  outofstock
}

model Product {
  id            String          @id @default(uuid())
  categoryId    String?
  category      Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  name          String
  price         Int
  description   String
  image         Json
  quantity      Int
  status        ProductStatus   @default(instock)
  deleted       Boolean         @default(false)
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  ProductRating ProductRating[]
  Cart          Cart[]

  @@index([id, name])
  @@map("products")
}

model ProductRating {
  id        String    @id @default(uuid())
  productId String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  deleted   Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id, productId, userId])
  @@map("product_ratings")
}

model Cart {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([id, userId, productId])
  @@map("carts")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  deleted   Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Product   Product[]

  @@index([id, name])
  @@map("categories")
}

enum OrderStatus {
  pending
  processing
  delivering
  completed
  cancelled
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  shippingAddress String
  status          OrderStatus   @default(pending)
  deleted         Boolean       @default(false)
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  paymentId       String?       @unique
  discountId      String?
  user            User          @relation(fields: [userId], references: [id])
  payment         Payment?      @relation(fields: [paymentId], references: [id])
  discount        Discount?     @relation(fields: [discountId], references: [id])
  OrderDetail     OrderDetail[]

  @@index([id, userId])
  @@map("orders")
}

model OrderDetail {
  id            String    @id @default(uuid())
  orderId       String    @unique
  total         Int       @default(0)
  productOrigin Json      @map("product_origin")
  deleted       Boolean   @default(false)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  Order         Order?    @relation(fields: [orderId], references: [id])

  @@index([id, orderId])
  @@map("order_details")
}

enum PaymentStatus {
  pending
  success
  failed
}

enum PaymentMethod {
  cod // cash on delivery
  vnpay // vnpay
}

model Payment {
  id            String        @id @default(uuid())
  paymentMethod PaymentMethod @default(cod)
  amount        Int
  orderId       String?       @unique
  Order         Order?
  status        PaymentStatus @default(pending)
  deleted       Boolean       @default(false)
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
  User          User?         @relation(fields: [userId], references: [id])
  userId        String?

  @@index([id, orderId])
  @@map("payments")
}

model Image {
  id        String    @id @default(uuid())
  url       String
  width     Int
  height    Int
  status    String?
  deleted   Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  productId String?

  @@index([id, url])
  @@map("images")
}

model Discount {
  id         String    @id @default(uuid())
  code       String
  percent    Int
  max_uses   Int       @default(999)
  start_at   DateTime
  end_at     DateTime
  deleted    Boolean   @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  categoryId String?
  Order      Order[]

  @@index([id, code])
  @@map("discounts")
}
